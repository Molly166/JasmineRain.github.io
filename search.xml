<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis&#39;s data type</title>
      <link href="/JasmineRain.github.io/2025/08/18/Redis-s-data-type/"/>
      <url>/JasmineRain.github.io/2025/08/18/Redis-s-data-type/</url>
      
        <content type="html"><![CDATA[<h2 id="�ַ���String"><a href="#�ַ���String" class="headerlink" title="�ַ���String"></a>�ַ���String</h2><p>���������ݴ洢��Ԫ�����Դ洢�ַ������������߸�����<br>string�����Ƕ����ư�ȫ�ġ�redis��string���԰����κ����ݣ�����jpgͼƬ�������л��Ķ���<br>string������redis��������������ͣ�string���͵�ֵ����ܴ洢512mb</p><h3 id="string��������"><a href="#string��������" class="headerlink" title="string��������"></a>string��������</h3><ul><li>SET key value:���ü���ֵ</li><li>GET key:��ȡ����ֵ</li><li>INCR key:������ֵ��1</li><li>DECR key:������ֵ��1</li><li>APPEND key value:��ֵ׷�ӵ�����ֵ֮��</li></ul><h2 id="��ϣhash"><a href="#��ϣhash" class="headerlink" title="��ϣhash"></a>��ϣhash</h2><p>һ����ֵ�Լ��ϣ����Դ洢����ֶ�<br>redis hash��һ����ֵ�Լ��ϣ�������һ��С�͵�noSQL���ݿ�<br>redis hash��һ��string���͵�field��value��ӳ�����hash�ر��ʺ����ڴ洢����<br>ÿ����ϣ�����Դ洢2^32-1����ֵ��</p><h3 id="hash��������"><a href="#hash��������" class="headerlink" title="hash��������"></a>hash��������</h3><ul><li>HSET key field value:���ù�ϣ�����ֶε�ֵ</li><li>HGET key field:��ȡ��ϣ�����ֶε�ֵ</li><li>HGETALL key:��ȡ��ϣ���������ֶκ�ֵ</li><li>HDEL key field:ɾ����ϣ���е�һ�������ֶ�</li></ul><h2 id="�б�list"><a href="#�б�list" class="headerlink" title="�б�list"></a>�б�list</h2><p>һ���򵥵��б������Դ洢һϵ�е��ַ���Ԫ��<br>redis�б�����򵥵��ַ����б������ղ���˳������<br>�б������Դ洢2^32-1��Ԫ��</p><h3 id="list��������"><a href="#list��������" class="headerlink" title="list��������"></a>list��������</h3><ul><li>LPUSH key value:��ֵ���뵽�б�ͷ��</li><li>RPUSH key value:��ֵ���뵽�б�β��</li><li>LPOP key:�Ƴ�����ȡ�б��ĵ�һ��Ԫ��</li><li>RPOP key:�Ƴ�����ȡ�б������һ��Ԫ��</li><li>LRANGE key start stop:��ȡ�б���ָ����Χ(start-stop)�ڵ�Ԫ��</li></ul><h2 id="����set"><a href="#����set" class="headerlink" title="����set"></a>����set</h2><p>һ�����򼯺ϣ����Դ洢���ظ����ַ���Ԫ��<br>redis��set��string���͵����򼯺�<br>������ͨ����ϣ��ʵ�ֵģ��������ӡ�ɾ�������ҵĸ��Ӷȶ���O(1)</p><h3 id="set��������"><a href="#set��������" class="headerlink" title="set��������"></a>set��������</h3><ul><li>SADD key value:�򼯺�����һ��������Ա</li><li>SREM key value:�Ƴ������е�һ��������Ա</li><li>SMEMBERS key:���ؼ����е����г�Ա</li><li>SISMEMBER key value:�ж��Ƿ��Ǽ��ϵĳ�Ա</li></ul><h2 id="���򼯺�sorted-set"><a href="#���򼯺�sorted-set" class="headerlink" title="���򼯺�sorted set"></a>���򼯺�sorted set</h2><p>�����ڼ��ϣ�����ÿ��Ԫ�ض���һ������score��֮����<br>redis zset��setһ��Ҳ��string����Ԫ�صļ��ϣ��Ҳ������ظ��ĳ�Ա<br>��ͬ����ÿ��Ԫ�ض������һ��double���͵ķ�����redis����ͨ��������Ϊ�����еĳ�Ա���д�С���������<br>zset�ĳ�Ա��Ψһ�ģ�������ȴ�����ظ�</p><h3 id="sorted-zset��������"><a href="#sorted-zset��������" class="headerlink" title="sorted zset��������"></a>sorted zset��������</h3><ul><li>ZADD key score value:�����򼯺�����һ��������Ա��������Ѵ��ڳ�Ա�ķ���</li><li>ZRANGE key start stop [WITHSCORES]:����ָ����Χ�ڵĳ�Ա</li><li>ZREM key value:�Ƴ����򼯺��е�һ��������Ա</li><li>ZSCORE key value:�������򼯺��У���Ա�ķ���ֵ</li></ul><h2 id="λͼ-Bitmaps"><a href="#λͼ-Bitmaps" class="headerlink" title="λͼ Bitmaps"></a>λͼ Bitmaps</h2><p>�����ַ������ͣ����Զ�ÿ��λ���в���<br>λ���飬���Զ��ַ�������λ����<br>������ʵ�ֲ�¡��������λ����</p><h2 id="����־-HyperLogLogs"><a href="#����־-HyperLogLogs" class="headerlink" title="����־ HyperLogLogs"></a>����־ HyperLogLogs</h2><p>���ڻ���ͳ�ƣ����Թ��㼯���е�ΨһԪ������</p><h2 id="�����ռ�Geospatial"><a href="#�����ռ�Geospatial" class="headerlink" title="�����ռ�Geospatial"></a>�����ռ�Geospatial</h2><p>���ڴ洢����λ����Ϣ<br>֧�ֵ����ռ������Ͱ뾶��ѯ</p><h2 id="����-����Pub-Sub"><a href="#����-����Pub-Sub" class="headerlink" title="����&#x2F;����Pub&#x2F;Sub"></a>����&#x2F;����Pub&#x2F;Sub</h2><p>һ����Ϣͨ��ģʽ�������ͻ��˶�����Ϣͨ���������շ�������ͨ������Ϣ</p><h2 id="��Streams"><a href="#��Streams" class="headerlink" title="��Streams"></a>��Streams</h2><p>������Ϣ���к���־�洢��֧����Ϣ�ĳ־û���ʱ������</p><h2 id="g��Modules"><a href="#g��Modules" class="headerlink" title="ģ��Modules"></a>ģ��Modules</h2><p>redis֧�ֶ�̬����ģ�飬������չredis�Ĺ���</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data type </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merge sort</title>
      <link href="/JasmineRain.github.io/2025/08/18/Merge-sort/"/>
      <url>/JasmineRain.github.io/2025/08/18/Merge-sort/</url>
      
        <content type="html"><![CDATA[<p>归并排序适合处理大规模数据排序，尤其是当需要稳定排序时非常有用</p><h2 id="归并排序原理"><a href="#归并排序原理" class="headerlink" title="归并排序原理"></a>归并排序原理</h2><ol><li>分治Divide，将数组从中间分成两半</li><li>解决conquer，递归地对左右两半分别进行归并排序</li><li>合并combine，将两个已排序的子数组合并成一个有序数组</li></ol><ul><li>时间复杂度：O(n logn)</li><li>空间复杂度：O(n)，需要额外数组用于合并</li><li>稳定排序，相同元素的相对顺序保持不变</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mid := <span class="built_in">len</span>(arr) / <span class="number">2</span></span><br><span class="line">    left := mergeSort(arr[:mid])</span><br><span class="line">    right := mergeSort(arr[mid:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(left, right []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    result := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i &lt; <span class="built_in">len</span>(left) &amp;&amp; j &lt; <span class="built_in">len</span>(right) &#123;</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j] &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, left[i])</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, right[j])</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">append</span>(result, left[i:]...)</span><br><span class="line">    result = <span class="built_in">append</span>(result, right[j:]...)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">    sorted := mergeSort(arr)</span><br><span class="line">    fmt.Println(sorted) <span class="comment">// [1 2 3 4 5 6]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        mergeSortHelper(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSortHelper</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        mergeSortHelper(arr, left, mid);</span><br><span class="line">        mergeSortHelper(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(arr, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt;= arr[j]) temp[k++] = arr[i++];</span><br><span class="line">            <span class="keyword">else</span> temp[k++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) temp[k++] = arr[i++];</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= right) temp[k++] = arr[j++];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>; p &lt; temp.length; p++) arr[left + p] = temp[p];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        mergeSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Sort </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Merge sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How is data sorting implemented in MySQL?</title>
      <link href="/JasmineRain.github.io/2025/08/18/How-is-data-sorting-implemented-in-MySQL/"/>
      <url>/JasmineRain.github.io/2025/08/18/How-is-data-sorting-implemented-in-MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>排序过程中，如果排序字段命中索引，则利用<strong>索引排序</strong><br>反之，使用<strong>文件排序</strong><br>文件排序中，如果数据量少则在内存中排序，具体是使用单路排序或者双路排序<br>如果数据大则利用磁盘文件进行外部排序，一般使用归并排序</p><h2 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h2><p>MySQL可以分为索引排序和filesort</p><h3 id="索引排序"><a href="#索引排序" class="headerlink" title="索引排序"></a>索引排序</h3><p>如果查询中的ORDER BY子句包含的字段已经在索引中，并且索引的排列顺序和ORDER BY子句一致，则可直接利用索引进行排序。这种方式效率高，因为索引有序。</p><h3 id="filesort"><a href="#filesort" class="headerlink" title="filesort"></a>filesort</h3><p>当使用explain分析SQL发现执行计划的extra中包含using filesort的时候，说明它无法应用索引的顺序，而主动排序了。</p><p>如果需要<strong>排序的数据比较少</strong>，则直接在内存中通过<code>sort_buffer</code>就能排了。具体是通过<code>sort_buffer_size</code>参数来控制<code>sort_buffer</code>的大小，如果需要排序的数据量小于<code>sort_buffer</code>则直接在内存中排序，反之需要利用磁盘临时文件排序，性能就比较差了。</p><h4 id="内存排序"><a href="#内存排序" class="headerlink" title="内存排序"></a>内存排序</h4><h5 id="双路排序"><a href="#双路排序" class="headerlink" title="双路排序"></a>双路排序</h5><p>有一个叫<code>max_length_for_sort_data</code>参数，默认是4096字节，如果select列的数据长度超过它，则MySQl采用<strong>row_id排序</strong>，即把row_id(有主键就是主键)+排序字段放置到<code>sort_buffer</code>中排序。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array</title>
      <link href="/JasmineRain.github.io/2025/08/18/Array/"/>
      <url>/JasmineRain.github.io/2025/08/18/Array/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数组是一种<strong>线性数据结构</strong>，用于存储<strong>相同类型的元素</strong>，在内存中是<strong>连续分配</strong>的</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p><strong>固定长度</strong>:声明时需要确定大小(静态数组)，或者动态数组可以扩展长度(for example:Go’s slice,Java’s ArrayList)</p></li><li><p><strong>随机访问</strong>:通过下标在O(1)的时间内访问任意元素</p></li><li><p><strong>连续存储</strong>:方便计算元素的地址，但插入和删除中间元素可能需要移动大量数据</p></li></ol><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定长数组</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">arr[<span class="number">2</span>]=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态数组 slice</span></span><br><span class="line">s:=[]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定长数组</span></span><br><span class="line"><span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line"><span class="type">int</span>[] arr2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h3><p>按下标访问，注意下标从0开始</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(arr[<span class="number">0</span>])</span><br><span class="line">fmt.Println(s[<span class="built_in">len</span>(s)<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.Println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.Println(arr[arr.length-<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(s);i++&#123;</span><br><span class="line">    fmt.Println(s[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,v:=<span class="keyword">range</span> s&#123;</span><br><span class="line">    fmt.Println(i,v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v:arr)&#123;</span><br><span class="line">    System.out.println(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>数组固定长度时中间插入&#x2F;删除效率低，需要移动元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s:=[]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">index:=<span class="number">2</span></span><br><span class="line">val:=<span class="number">99</span></span><br><span class="line">s=<span class="built_in">append</span>(s[:index],<span class="built_in">append</span>([]<span class="type">int</span>&#123;val&#125;,s[index:]...)...)</span><br><span class="line">fmt.Println(s)<span class="comment">// [1 2 99 3 4]</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">list.add(<span class="number">2</span>,<span class="number">99</span>);</span><br><span class="line">System.out.Println(list);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataStruct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer network</title>
      <link href="/JasmineRain.github.io/2025/08/16/Computer-network/"/>
      <url>/JasmineRain.github.io/2025/08/16/Computer-network/</url>
      
        <content type="html"><![CDATA[<h2 id="basic-network"><a href="#basic-network" class="headerlink" title="basic network"></a>basic network</h2><h3 id="network’s-definition-history-develop"><a href="#network’s-definition-history-develop" class="headerlink" title="network’s definition,history,develop"></a>network’s definition,history,develop</h3><p><strong>computer network</strong>:A collection of autonomous computer systems interconnected in such a way that they can share resources with each other.</p>]]></content>
      
      
      <categories>
          
          <category> Computer network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming</title>
      <link href="/JasmineRain.github.io/2025/08/16/Dynamic-Programming/"/>
      <url>/JasmineRain.github.io/2025/08/16/Dynamic-Programming/</url>
      
        <content type="html"><![CDATA[<p>DP is a way that making the question become the more easy little questions to solve.</p><h2 id="basic-dp"><a href="#basic-dp" class="headerlink" title="basic dp"></a>basic dp</h2>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fucking learn damn english</title>
      <link href="/JasmineRain.github.io/2025/08/16/Fucking-learn-damn-english/"/>
      <url>/JasmineRain.github.io/2025/08/16/Fucking-learn-damn-english/</url>
      
        <content type="html"><![CDATA[<p>author<br>accord<br>benefit<br>economic<br>issue<br>impact<br>consumer<br>focus<br>climate<br>concern<br>environment<br>challenge<br>positive<br>process<br>culture<br>community<br>project<br>academic<br>medium<br>design<br>demand<br>mental<br>negative<br>species<br>decade<br>involve<br>remain<br>individual<br>economy<br>expert<br>compare<br>communication<br>account<br>argue<br>access<br>potential<br>claim<br>graduate<br>advantage<br>emotion<br>evidence<br>performance<br>avoid<br>force<br>financial<br>factor<br>disease<br>effective<br>fund<br>cognitive<br>contribute<br>figure<br>protein<br>region<br>attitude<br>management<br>solution<br>fuel<br>insurance<br>behavior<br>credit<br>encourage<br>poverty<br>attract<br>colleague<br>device<br>engage<br>score<br>current<br>professional<br>apply<br>available<br>detail<br>trend</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English Words </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
